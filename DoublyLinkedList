#include<bits/stdc++.h>
using namespace std;

class Node{

    public:

    int data;
    Node* prev;
    Node* next;

    Node(int data)
    {
        this -> data = data;
        this -> prev = NULL;
        this -> next = NULL;
    }

    ~Node()
    {
        int val = this -> data;
        if(next != NULL)
        {
            delete next;
            next = NULL;
        }
    }

};

// '&' is very important in front of 'head'
void insertAtHead(Node* &head, Node* &tail, int data)
{

    if(head == NULL)
    {
        Node* temp = new Node(data);
        head = temp;
        tail = temp;
    }

    else
    {
Node* temp = new Node(data);
temp -> next = head;
head -> prev = temp;
head = temp;
    }

}

void insertAtTail(Node* &head, Node* &tail, int data)
{
    
    if(tail == NULL)
    {
        Node* temp = new Node(data);
        tail = temp;
        head = temp;
    }
    Node* temp = new Node(data);
    tail -> next = temp;
    temp -> prev = tail;
    tail = temp;
}

void insertAtPos(Node* &head, Node* &tail, int pos, int data)
{
    if(pos == 1)
    {
        insertAtHead(head, tail, data);
        return;
    }

    Node* temp = head;
    int cnt = 1;

    while(cnt < pos - 1)
    {
        temp = temp -> next;
        cnt++;
    }

    if(temp -> next == NULL)
    {
        insertAtTail(head, tail, data);
        return;
    }

        Node* nNode = new Node(data);
        nNode -> next = temp -> next;
        temp -> next -> prev = nNode;
        temp -> next = nNode;
        nNode -> prev = temp;

}

void deletion(Node* &head, int pos)
{
    if(pos == 1)
    {
        Node* temp = head;
        temp -> next -> prev = NULL;
        head = temp -> next;
        temp -> next = NULL;
        delete temp;
    }
    else
    {
        Node* curr = head;
        Node* prev = NULL;
        int cnt = 1;
        while(cnt < pos)
        {
            prev = curr;
            curr = curr -> next;
            cnt++;
        }
        curr -> prev = NULL;
        prev -> next = curr -> next;
        curr -> next = NULL;
        delete curr;
    }
}

void print(Node* head)
{
    Node* temp = head;

    while(temp != NULL)
    {
        cout << temp -> data << " ";
        temp = temp -> next;
    }

    cout << endl;

}

void len(Node* head)
{
    int l = 0;
    Node* temp = head;

    while(temp != NULL)
    {
        l++;
        temp = temp -> next;
    }

    cout << l <<endl;

}

int main()
{
    
    //Node* node1 = new Node(10);
    Node* head = NULL;
    Node* tail = NULL;

    insertAtHead(head, tail, 11);
    print(head);
    // len(head);

    insertAtHead(head, tail, 12);
    print(head);

    insertAtHead(head, tail, 13);
    print(head);

    insertAtTail(tail, tail, 9);
    print(head);

    insertAtPos(head, tail, 2, 14);
    print(head);

    insertAtPos(head, tail, 6, 14);
    print(head);

    deletion(head,2);
    print(head);

    return 0;

}
